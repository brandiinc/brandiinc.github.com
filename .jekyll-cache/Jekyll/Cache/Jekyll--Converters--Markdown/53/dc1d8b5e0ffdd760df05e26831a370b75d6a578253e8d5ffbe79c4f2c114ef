I"ˬ<p><span><a class="gray" href="#link1">Overview</a></span>
<span class="indent"><a class="gray" href="#link2">MVC패턴의 장단점</a></span>
<span class="indent"><a class="gray" href="#link3">MVVM 패턴</a></span>
<span class="indent2"><a class="gray" href="#link4">LiveData Model</a></span>
<span class="indent2"><a class="gray" href="#link5">예제 LiveData Model</a></span>
<span class="indent2"><a class="gray" href="#link6">AAC ViewModel</a></span>
<span class="indent2"><a class="gray" href="#link7">예제 AAC ViewModel</a></span>
<span class="indent2"><a class="gray" href="#link8">DI (Dependency Injection)</a></span>
<span class="indent2"><a class="gray" href="#link9">예제 DI (Dependency Injection)</a></span>
<span class="indent2"><a class="gray" href="#link10">Koin</a></span>
<span class="indent2"><a class="gray" href="#link11">예제 Koin</a></span>
<span class="indent2"><a class="gray" href="#link12">Koin ViewModel</a></span>
<span class="indent2"><a class="gray" href="#link13">예제 Koin ViewModel</a></span>
<span><a class="gray" href="#link14">Conclusion</a></span>
<span class="indent"><a class="gray" href="#link15">참고</a></span>
<br /><br /></p>

<p><a name="link1"></a></p>
<h1 id="overview">Overview</h1>
<p>2014년부터 브랜디와 하이버를 홀로 개발하기 시작하여, Android 브랜디 소스를 개발한지 5년이 지나고 있습니다. 2018년에 드디어 Android 개발 인원이 충원되었고, 현재는 Android 개발 파트 3명이서 협업으로 개발하고 있습니다.</p>

<p>지난 시간 동안 브랜디는 빠른 속도의 개발이 최우선이었고, 기존 아키텍처의 변경을 최소한의 선에서 변경을 해왔습니다. RxJava, Kotlin, AndroidX 등을 적용했지만, 소스의 관리와 인원 배분의 문제는 많이 줄지 않았습니다. 왜냐하면 기존 소스는 MVC 패턴에서 크게 변경하지 못했기 때문입니다. View와 Controller의 경계선이 모호하고, 지속적인 앱 개발로 인해 불필요한 소스와 현재 사용되는 소스를 명확하게 구별하기도 쉽지 않아 기존 개발자가 아니라면 접근성이 매우 불편했습니다. 이러한 불편을 개선하여 신규 개발자와의 협업에 용이한 MVVM 패턴을 도입하고자 합니다.
<br /><br /></p>

<p><a name="link2"></a></p>
<h2 id="mvc-패턴의-장단점">MVC 패턴의 장단점</h2>

<p>그렇다면 어째서 기존에 MVC 패턴으로 브랜디를 만들었는지 생각해 보겠습니다.</p>

<p>장점은 너무 명확했습니다. 브랜디 개발 초창기, 빠른 개발과 수정을 하기 편한 패턴이었기 때문입니다. 스타트업 초창기 빠른 개발 속도의 대응, 적은 인원 혹은 혼자서 개발을 해야 했기 때문에 MVC를 선택하였고, 그 당시에는 나쁜 선택이 아니었습니다.</p>

<p>하지만 현재 브랜디가 어느 정도 궤도에 올라오고, 개발 볼륨 자체가 커진 플랫폼 서비스로 오면서 MVC 패턴을 사용할수록 장점보다 단점이 더 커졌습니다. View와 Controller의 의존성이 높아짐에 따라 작은 소스 변경도 조심스럽고 로직을 확인하기 위한 TDD도 진행하기 쉬운 구조가 아니었습니다.</p>

<p>커진 서비스만큼 개발자의 작은 실수도 서비스에 큰 영향을 끼치는 수준에 다다랐습니다.
<br /><br /></p>

<p><a name="link3"></a></p>
<h2 id="mvvm-패턴">MVVM 패턴</h2>

<p>그리고 현재 서로 다른 실력의 3명의 개발자가 서로의 난이도를 고려하여 개발을 할 수 있도록 모듈 간의 의존성이 낮은 MVVM 패턴을 도입하기로 결정하였습니다.</p>

<figure class="fitcontent">
  <img src="http://labs.brandi.co.kr///assets/2020/20200217/01.png" alt="01" />
</figure>
<figcaption></figcaption>

<p><a name="link4"></a></p>
<h3 id="livedata-model">LiveData Model</h3>

<p>View (UI), ViewModel (비즈니스 로직), Model (데이터)로 분리가 되며, 데이터를 주고받는 역할은 LiveData로 처리가 될 것입니다. Observe 패턴 + LifeCycle을 같이 관리할 수 있는 AAC(Android Architecture Components)입니다.</p>

<figure class="fitcontent">
  <img src="http://labs.brandi.co.kr///assets/2020/20200217/02.png" alt="01" />
</figure>
<figcaption></figcaption>

<p>위 표와 같이 Activity의 라이프 사이클에 따라 Observer Update가 달라집니다.<br />
Activity가 백그라운드로 진입할 경우 LiveData의 postValue(C), (D)는 수신되지 않습니다.</p>

<p><a name="link5"></a></p>
<h3 id="예제-livedata-model">예제 LiveData Model</h3>

<p>ACC (Android Architecture Components)의 기본적인 LiveData Model을 구현하는 기초 소스입니다.</p>

<p>ExampleData.kt</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ExampleData</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="py">value</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span>
<span class="p">}</span>
</code></pre></div></div>

<p>MainActivity.kt</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">TAG</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">javaClass</span><span class="p">.</span><span class="n">simpleName</span>

    <span class="c1">//변경할 수 있는 LiveData</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">_exampleLiveData</span><span class="p">:</span> <span class="nc">MutableLiveData</span><span class="p">&lt;</span><span class="nc">ExampleData</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nc">MutableLiveData</span><span class="p">()</span>

    <span class="c1">//Observe 를 이용한 데이터 수신을 위한 LiveData</span>
    <span class="kd">val</span> <span class="py">exampleData</span><span class="p">:</span> <span class="nc">LiveData</span><span class="p">&lt;</span><span class="nc">ExampleData</span><span class="p">&gt;</span>
        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">_exampleLiveData</span>


    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
        <span class="nf">setContentView</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_main</span><span class="p">)</span>

        <span class="c1">//LiveData 에 콜백 등록</span>
        <span class="n">exampleData</span><span class="p">.</span><span class="nf">observe</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nc">Observer</span> <span class="p">{</span>
            <span class="nc">Log</span><span class="p">.</span><span class="nf">v</span><span class="p">(</span><span class="nc">TAG</span><span class="p">,</span> <span class="s">"${it.value}"</span><span class="p">)</span>
        <span class="p">})</span>

        <span class="c1">//송신 데이터 생성</span>
        <span class="kd">val</span> <span class="py">exampleData</span> <span class="p">=</span> <span class="nc">ExampleData</span><span class="p">().</span><span class="nf">apply</span> <span class="p">{</span>
            <span class="n">value</span> <span class="p">=</span> <span class="mi">10</span>
        <span class="p">}</span>

        <span class="c1">//MutableLiveData 에 송신 데이터 전달</span>
        <span class="n">_exampleLiveData</span><span class="p">.</span><span class="nf">postValue</span><span class="p">(</span><span class="n">exampleData</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>MVVM에서 데이터를 주고받는 기본적인 단위인 LiveData을 확인해 보았습니다.</p>

<p><a name="link6"></a></p>
<h3 id="aac-viewmodel">AAC ViewModel</h3>

<p>AAC에서 제공하는 ViewModel 클래스는 수명 주기를 고려하여 UI 관련 데이터를 저장하고 비즈니스 로직을 관리하도록 설계되었습니다.</p>

<figure class="fitcontent">
  <img src="http://labs.brandi.co.kr///assets/2020/20200217/03.png" alt="01" />
</figure>
<figcaption></figcaption>

<p><a name="link7"></a></p>
<h3 id="예제-aac-viewmodel">예제 AAC ViewModel</h3>

<p>LiveData를 AAC ViewModel를 이용하여 비즈니스 로직을 분리시키는 예제입니다.</p>

<p>ExampleViewModel.kt</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ExampleViewModel</span> <span class="p">:</span> <span class="nc">ViewModel</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">TAG</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">javaClass</span><span class="p">.</span><span class="n">simpleName</span>

    <span class="c1">//변경할 수 있는 LiveData</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">_exampleLiveData</span><span class="p">:</span> <span class="nc">MutableLiveData</span><span class="p">&lt;</span><span class="nc">ExampleData</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nc">MutableLiveData</span><span class="p">()</span>

    <span class="c1">//Observe 를 이용한 데이터 수신을 위한 LiveData</span>
    <span class="kd">val</span> <span class="py">exampleData</span><span class="p">:</span> <span class="nc">LiveData</span><span class="p">&lt;</span><span class="nc">ExampleData</span><span class="p">&gt;</span>
        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">_exampleLiveData</span>

    <span class="k">fun</span> <span class="nf">requestData</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">//송신 데이터 생성</span>
        <span class="kd">val</span> <span class="py">exampleData</span> <span class="p">=</span> <span class="nc">ExampleData</span><span class="p">().</span><span class="nf">apply</span> <span class="p">{</span>
            <span class="n">value</span> <span class="p">=</span> <span class="mi">10</span>
        <span class="p">}</span>

        <span class="n">_exampleLiveData</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">exampleData</span>
    <span class="p">}</span>

    <span class="c1">//ViewModel를 가지고 있는 Activity 혹은 Fragment 가 종료될 경우 ViewModel 이 정리된다.</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCleared</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCleared</span><span class="p">()</span>
        <span class="nc">Log</span><span class="p">.</span><span class="nf">v</span><span class="p">(</span><span class="nc">TAG</span><span class="p">,</span> <span class="s">"&gt;&gt;&gt; onCleared"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>MainActivity.kt</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">,</span> <span class="nc">ViewModelStoreOwner</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">TAG</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">javaClass</span><span class="p">.</span><span class="n">simpleName</span>

    <span class="k">lateinit</span> <span class="kd">var</span> <span class="py">exampleViewModel</span><span class="p">:</span> <span class="nc">ExampleViewModel</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
        <span class="nf">setContentView</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_main</span><span class="p">)</span>

        <span class="c1">//AAC ViewModel 생성</span>
        <span class="kd">val</span> <span class="py">androidViewModelFactory</span> <span class="p">=</span> <span class="nc">ViewModelProvider</span>
                                    <span class="p">.</span><span class="nc">AndroidViewModelFactory</span>
                                    <span class="p">.</span><span class="nf">getInstance</span><span class="p">(</span><span class="n">application</span><span class="p">)</span>
        <span class="n">exampleViewModel</span> <span class="p">=</span> <span class="nc">ViewModelProvider</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">androidViewModelFactory</span><span class="p">)</span>
                                    <span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="nc">ExampleViewModel</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">)</span>

        <span class="c1">//LiveData 에 콜백 등록</span>
        <span class="n">exampleViewModel</span><span class="p">.</span><span class="n">exampleData</span><span class="p">.</span><span class="nf">observe</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nc">Observer</span> <span class="p">{</span>
            <span class="nc">Log</span><span class="p">.</span><span class="nf">v</span><span class="p">(</span><span class="nc">TAG</span><span class="p">,</span> <span class="s">"&gt;&gt;&gt; ${it.value}"</span><span class="p">)</span>
        <span class="p">})</span>

        <span class="n">exampleViewModel</span><span class="p">.</span><span class="nf">requestData</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>AAC ViewModel 객체를 생성하는 방법과 비즈니스 로직을 분리하여 View에서 요청과 응답을 받는 부분을 분리하는 예제를 확인했습니다.</p>

<p><a name="link8"></a></p>
<h3 id="di-dependency-injection">DI (Dependency Injection)</h3>

<p>DI (Dependency Injection)는 의존성 주입을 의미합니다. 의존성이란 클래스간 객체로 참조가 되는 경우를 말합니다. MVVM 모델은 이미 완성했지만, 모듈 간 독립성과 TDD가 용이한 구조로 만들기 위해서 DI에 대해서 알아보도록 하겠습니다.</p>

<p><a name="link9"></a></p>
<h3 id="예제-di-dependency-injection">예제 DI (Dependency Injection)</h3>

<p>의존성이 무엇인지 대한 간단한 예제입니다.</p>

<p>SessionData.kt</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SessionData</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">sessionId</span><span class="p">:</span> <span class="nc">String</span>

    <span class="k">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">sessionId</span> <span class="p">=</span> <span class="s">"abcd"</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>ExampleData.kt</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ExampleData</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="py">value</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span>
    <span class="kd">val</span> <span class="py">sessionData</span><span class="p">:</span> <span class="nc">SessionData</span>

    <span class="nf">init</span> <span class="p">{</span>
        <span class="n">sessionData</span> <span class="p">=</span> <span class="nc">SessionData</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위처럼 ExampleData 클래스는 내부에서 SessionData 클래스를 참조하고 있습니다.</p>

<p>ExampleData 클래스는 SessionData 클래스에 의존성을 갖고 있습니다. 이렇게 생긴 의존성은 SessionData 클래스 생성자가 바뀌게 된다면 참조하고 있는 클래스는 매번 변경되어야 합니다.</p>

<p>DI를 통해 이와 같은 의존성을 해결함으로써 종속된 코드와 결합도를 낮추면서 클래스의 유연성과 확장성을 동시에 확보할 수 있습니다.</p>

<p><a name="link10"></a></p>
<h3 id="koin">Koin</h3>

<p>Koin은 DI 라이브러리로 Android에서 DI를 사용하기 위한 기본적인 기능을 손쉽게 제공합니다.</p>

<p><a name="link11"></a></p>
<h3 id="예제-koin">예제 Koin</h3>

<p>Koin을 이용한 의존성 주입의 예제입니다.</p>

<p>app.glade</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dependencies</span> <span class="p">{</span>
    <span class="c1">// Koin for Kotlin</span>
    <span class="n">implementation</span> <span class="s">"org.koin:koin-core:2.1.0-alpha-7"</span>
    <span class="c1">// Koin extended &amp; experimental features</span>
    <span class="n">implementation</span> <span class="s">"org.koin:koin-core-ext:2.1.0-alpha-7"</span>
    <span class="c1">// Koin for Unit tests</span>
    <span class="n">testImplementation</span> <span class="s">"org.koin:koin-test:2.1.0-alpha-7"</span>


    <span class="c1">// Koin AndroidX Scope features</span>
    <span class="n">implementation</span> <span class="s">"org.koin:koin-androidx-scope:2.1.0-alpha-7"</span>
    <span class="c1">// Koin AndroidX ViewModel features</span>
    <span class="n">implementation</span> <span class="s">"org.koin:koin-androidx-viewmodel:2.1.0-alpha-7"</span>
    <span class="c1">// Koin AndroidX Fragment features</span>
    <span class="n">implementation</span> <span class="s">"org.koin:koin-androidx-fragment:2.1.0-alpha-7"</span>
    <span class="c1">// Koin AndroidX Experimental features</span>
    <span class="n">implementation</span> <span class="s">"org.koin:koin-androidx-ext:2.1.0-alpha-7"</span>
<span class="p">}</span>
</code></pre></div></div>

<p>PackageRepository.kt</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">PackageRepository</span><span class="p">(</span><span class="n">context</span><span class="p">:</span> <span class="nc">Context</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">packageName</span><span class="p">:</span> <span class="nc">String</span>

    <span class="nf">init</span> <span class="p">{</span>
        <span class="n">packageName</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">packageName</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>PrintService.kt</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">PrintService</span> <span class="p">(</span><span class="kd">val</span> <span class="py">packageRepository</span><span class="p">:</span> <span class="nc">PackageRepository</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">printHello</span><span class="p">()</span> <span class="p">{</span>
        <span class="nc">Log</span><span class="p">.</span><span class="nf">v</span><span class="p">(</span><span class="s">"PrintService"</span><span class="p">,</span> <span class="s">"Hello ${packageRepository.packageName}"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>InjectCountData.kt</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">InjectCountData</span> <span class="p">{</span>
    <span class="k">companion</span> <span class="k">object</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="py">injectCount</span> <span class="p">=</span> <span class="mi">0</span>
    <span class="p">}</span>

    <span class="nf">init</span> <span class="p">{</span>
        <span class="n">injectCount</span><span class="p">++</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">printCount</span><span class="p">()</span> <span class="p">{</span>
        <span class="nc">Log</span><span class="p">.</span><span class="nf">v</span><span class="p">(</span><span class="s">"InjectCountData"</span><span class="p">,</span> <span class="s">"injectCount $injectCount"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>MainApplication.kt</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainApplication</span> <span class="p">:</span> <span class="nc">Application</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">()</span>

        <span class="c1">//application 실행시 startKoin을 실행한다.</span>
        <span class="nf">startKoin</span> <span class="p">{</span>
            <span class="nf">androidLogger</span><span class="p">()</span>
            <span class="nf">androidContext</span><span class="p">(</span><span class="k">this</span><span class="nd">@MainApplication</span><span class="p">)</span>
            <span class="nf">modules</span><span class="p">(</span><span class="n">myModule</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">val</span> <span class="py">myModule</span> <span class="p">=</span> <span class="nf">module</span> <span class="p">{</span>

    <span class="c1">//싱글톤 구조</span>
    <span class="nf">single</span> <span class="p">{</span>
        <span class="c1">//context 를 파라미터로 생성하는 PrintServer 클래스</span>
        <span class="nc">PackageRepository</span><span class="p">(</span><span class="nf">androidContext</span><span class="p">())</span>
    <span class="p">}</span>

    <span class="nf">single</span> <span class="p">{</span>
        <span class="c1">//PackageRepository 객체로 생성되는 PrintService 클래스</span>
        <span class="c1">//get() 생성에 필요한 파라미터를 찾아서 주입힌다.</span>
        <span class="c1">//PrintService (val packageRepository: PackageRepository)</span>
        <span class="nc">PrintService</span><span class="p">(</span><span class="k">get</span><span class="p">())</span>
    <span class="p">}</span>

    <span class="c1">//주입 할 때마다 InjectCountData 객체 생성</span>
    <span class="nf">factory</span> <span class="p">{</span>
        <span class="nc">InjectCountData</span><span class="p">()</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>ExampleViewModel.kt</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ExampleViewModel</span> <span class="p">:</span> <span class="nc">ViewModel</span><span class="p">(),</span>
    <span class="c1">//Activity, Fragment 가 아닌 클래스에서 주입받기 위해서 KoinComponent 를 상속받는다.</span>
    <span class="nc">KoinComponent</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">TAG</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">javaClass</span><span class="p">.</span><span class="n">simpleName</span>

    <span class="k">private</span> <span class="kd">val</span> <span class="py">_exampleLiveData</span><span class="p">:</span> <span class="nc">MutableLiveData</span><span class="p">&lt;</span><span class="nc">ExampleData</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nc">MutableLiveData</span><span class="p">()</span>

    <span class="c1">//PrintService를 생성자 없이 inject로 주입힌다.</span>
    <span class="kd">val</span> <span class="py">printService</span><span class="p">:</span> <span class="nc">PrintService</span> <span class="k">by</span> <span class="nf">inject</span><span class="p">()</span>

    <span class="kd">val</span> <span class="py">exampleData</span><span class="p">:</span> <span class="nc">LiveData</span><span class="p">&lt;</span><span class="nc">ExampleData</span><span class="p">&gt;</span>
        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">_exampleLiveData</span>

    <span class="k">fun</span> <span class="nf">requestData</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">exampleData</span> <span class="p">=</span> <span class="nc">ExampleData</span><span class="p">().</span><span class="nf">apply</span> <span class="p">{</span>
            <span class="n">value</span> <span class="p">=</span> <span class="mi">10</span>
        <span class="p">}</span>

        <span class="n">_exampleLiveData</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">exampleData</span>
    <span class="p">}</span>

    <span class="c1">//ViewModel를 가지고 있는 Activity 혹은 Fragment 가 종료될 경우 ViewModel 이 정리된다.</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCleared</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCleared</span><span class="p">()</span>
        <span class="nc">Log</span><span class="p">.</span><span class="nf">v</span><span class="p">(</span><span class="nc">TAG</span><span class="p">,</span> <span class="s">"&gt;&gt;&gt; onCleared"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">printHello</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">printService</span><span class="p">.</span><span class="nf">printHello</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>MainActivity.kt</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">,</span> <span class="nc">ViewModelStoreOwner</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">TAG</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">javaClass</span><span class="p">.</span><span class="n">simpleName</span>

    <span class="k">lateinit</span> <span class="kd">var</span> <span class="py">exampleViewModel</span><span class="p">:</span> <span class="nc">ExampleViewModel</span>

    <span class="c1">//inject 로 생성자 없이 주입한다.</span>
    <span class="kd">val</span> <span class="py">inject_0</span> <span class="k">by</span> <span class="n">inject</span><span class="p">&lt;</span><span class="nc">InjectCountData</span><span class="p">&gt;()</span>
    <span class="kd">val</span> <span class="py">inject_1</span> <span class="k">by</span> <span class="n">inject</span><span class="p">&lt;</span><span class="nc">InjectCountData</span><span class="p">&gt;()</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
        <span class="nf">setContentView</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_main</span><span class="p">)</span>

        <span class="c1">//AAC ViewModel 생성</span>
        <span class="kd">val</span> <span class="py">androidViewModelFactory</span> <span class="p">=</span> <span class="nc">ViewModelProvider</span><span class="p">.</span><span class="nc">AndroidViewModelFactory</span><span class="p">.</span><span class="nf">getInstance</span><span class="p">(</span><span class="n">application</span><span class="p">)</span>
        <span class="n">exampleViewModel</span> <span class="p">=</span> <span class="nc">ViewModelProvider</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">androidViewModelFactory</span><span class="p">).</span><span class="k">get</span><span class="p">(</span><span class="nc">ExampleViewModel</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">)</span>

        <span class="c1">//LiveData 에 콜백 등록</span>
        <span class="n">exampleViewModel</span><span class="p">.</span><span class="n">exampleData</span><span class="p">.</span><span class="nf">observe</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nc">Observer</span> <span class="p">{</span>
            <span class="nc">Log</span><span class="p">.</span><span class="nf">v</span><span class="p">(</span><span class="nc">TAG</span><span class="p">,</span> <span class="s">"&gt;&gt;&gt; ${it.value}"</span><span class="p">)</span>
        <span class="p">})</span>

        <span class="n">exampleViewModel</span><span class="p">.</span><span class="nf">requestData</span><span class="p">()</span>
        <span class="n">exampleViewModel</span><span class="p">.</span><span class="nf">printHello</span><span class="p">()</span>

        <span class="n">inject_0</span><span class="p">.</span><span class="nf">printCount</span><span class="p">()</span>
        <span class="n">inject_1</span><span class="p">.</span><span class="nf">printCount</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위 예제를 통해 어떻게 의존성을 주입하는지 간단하게 확인할 수 있습니다. 또한 Koin DLS의 single, factory, get을 확인할 수 있습니다.</p>

<ul>
  <li>DSL 키워드
    <ul>
      <li>module : Koin 모듈 정의 블록</li>
      <li>factory  : inject 주입하는 시점에 해당 객체를 생성</li>
      <li>single : Singleton 객체 주입</li>
      <li>get : 주입해야 하는 컴포넌트들의 의존성을 처리</li>
    </ul>
  </li>
</ul>

<p><a name="link12"></a></p>
<h3 id="koin-viewmodel">Koin ViewModel</h3>

<p>Koin을 이용한다면 AAC ViewModel을 Koin ViewModel로 변경하여 의존성 주입을 이용할 수 있습니다.</p>

<p><a name="link13"></a></p>
<h3 id="예제-koin-viewmodel">예제 Koin ViewModel</h3>

<p>Koin ViewModel을 이용한 의존성 주입의 예제입니다.</p>

<p>MainApplication.kt</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainApplication</span> <span class="p">:</span> <span class="nc">Application</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">()</span>

        <span class="nf">startKoin</span> <span class="p">{</span>
            <span class="nf">androidLogger</span><span class="p">()</span>
            <span class="nf">androidContext</span><span class="p">(</span><span class="k">this</span><span class="nd">@MainApplication</span><span class="p">)</span>
            <span class="nf">modules</span><span class="p">(</span><span class="n">myModule</span><span class="p">,</span> <span class="n">myViewModel</span><span class="p">)</span>  <span class="c1">//myViewModel 추가</span>

        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//viewModel을 주입하기 위한 module</span>
<span class="kd">val</span> <span class="py">myViewModel</span> <span class="p">=</span> <span class="nf">module</span> <span class="p">{</span>
    <span class="c1">//vieModel 정의</span>
    <span class="nf">viewModel</span> <span class="p">{</span>
        <span class="nc">ExampleViewModel</span><span class="p">(</span><span class="k">get</span><span class="p">())</span> <span class="c1">//PrintService를 get()으로 주입</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">val</span> <span class="py">myModule</span> <span class="p">=</span> <span class="nf">module</span> <span class="p">{</span>
    <span class="nf">single</span> <span class="p">{</span>
        <span class="nc">PackageRepository</span><span class="p">(</span><span class="nf">androidContext</span><span class="p">())</span>
    <span class="p">}</span>

    <span class="nf">single</span> <span class="p">{</span>
        <span class="nc">PrintService</span><span class="p">(</span><span class="k">get</span><span class="p">())</span>
    <span class="p">}</span>

    <span class="nf">factory</span> <span class="p">{</span>
        <span class="nc">InjectCountData</span><span class="p">()</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>ExampleViewModel.kt</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ExampleViewModel</span>
    <span class="c1">//KoinComponent 를 사용한 주입이 아닌 생성자를 통해서 주입</span>
    <span class="p">(</span><span class="kd">val</span> <span class="py">printService</span><span class="p">:</span> <span class="nc">PrintService</span><span class="p">)</span>
    <span class="p">:</span> <span class="nc">ViewModel</span><span class="p">()</span> <span class="p">{</span>

    <span class="kd">val</span> <span class="py">TAG</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">javaClass</span><span class="p">.</span><span class="n">simpleName</span>

    <span class="k">private</span> <span class="kd">val</span> <span class="py">_exampleLiveData</span><span class="p">:</span> <span class="nc">MutableLiveData</span><span class="p">&lt;</span><span class="nc">ExampleData</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nc">MutableLiveData</span><span class="p">()</span>

    <span class="kd">val</span> <span class="py">exampleData</span><span class="p">:</span> <span class="nc">LiveData</span><span class="p">&lt;</span><span class="nc">ExampleData</span><span class="p">&gt;</span>
        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">_exampleLiveData</span>

    <span class="k">fun</span> <span class="nf">requestData</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">exampleData</span> <span class="p">=</span> <span class="nc">ExampleData</span><span class="p">().</span><span class="nf">apply</span> <span class="p">{</span>
            <span class="n">value</span> <span class="p">=</span> <span class="mi">10</span>
        <span class="p">}</span>

        <span class="n">_exampleLiveData</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">exampleData</span>
    <span class="p">}</span>


    <span class="k">fun</span> <span class="nf">printHello</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">printService</span><span class="p">.</span><span class="nf">printHello</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCleared</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCleared</span><span class="p">()</span>
        <span class="nc">Log</span><span class="p">.</span><span class="nf">v</span><span class="p">(</span><span class="nc">TAG</span><span class="p">,</span> <span class="s">"&gt;&gt;&gt; onCleared"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>MainActivity.kt</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">TAG</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">javaClass</span><span class="p">.</span><span class="n">simpleName</span>

    <span class="c1">//Koin을 이용한 ViewModel 주입</span>
    <span class="kd">val</span> <span class="py">exampleViewModel</span><span class="p">:</span> <span class="nc">ExampleViewModel</span> <span class="k">by</span> <span class="nf">viewModel</span><span class="p">()</span>
    <span class="kd">val</span> <span class="py">inject_0</span> <span class="k">by</span> <span class="n">inject</span><span class="p">&lt;</span><span class="nc">InjectCountData</span><span class="p">&gt;()</span>
    <span class="kd">val</span> <span class="py">inject_1</span> <span class="k">by</span> <span class="n">inject</span><span class="p">&lt;</span><span class="nc">InjectCountData</span><span class="p">&gt;()</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
        <span class="nf">setContentView</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_main</span><span class="p">)</span>

        <span class="c1">//AAC ViewModel 생성</span>
        <span class="cm">/*
        val androidViewModelFactory = ViewModelProvider
                            .AndroidViewModelFactory
                            .getInstance(application)
        exampleViewModel = ViewModelProvider(this, androidViewModelFactory)
                            .get(ExampleViewModel::class.java)
        */</span>

        <span class="c1">//LiveData 에 콜백 등록</span>
        <span class="n">exampleViewModel</span><span class="p">.</span><span class="n">exampleData</span><span class="p">.</span><span class="nf">observe</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nc">Observer</span> <span class="p">{</span>
            <span class="nc">Log</span><span class="p">.</span><span class="nf">v</span><span class="p">(</span><span class="nc">TAG</span><span class="p">,</span> <span class="s">"&gt;&gt;&gt; ${it.value}"</span><span class="p">)</span>
        <span class="p">})</span>

        <span class="n">exampleViewModel</span><span class="p">.</span><span class="nf">requestData</span><span class="p">()</span>
        <span class="n">exampleViewModel</span><span class="p">.</span><span class="nf">printHello</span><span class="p">()</span>

        <span class="n">inject_0</span><span class="p">.</span><span class="nf">printCount</span><span class="p">()</span>
        <span class="n">inject_1</span><span class="p">.</span><span class="nf">printCount</span><span class="p">()</span>

    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>AAC ViewModel을 Koin ViewModel로 변경하는 것부터 MVVM + Koin을 이용한 의존성 주입까지 알아보았습니다. MVVM의 장점과 의존성 주입을 더하여 생성자를 통한 객체 생성이 아닌 의존성 주입을 통해서 모듈 간의 독립성을 확보할 수 있는 구조를 만들어 보았습니다.
<br /><br /></p>

<p><a name="link14"></a></p>
<h1 id="conclusion">Conclusion</h1>

<p>기존 소스를 리펙토링 하는 작업은 언제나 쉬운 일이 아닙니다. 서비스 애플리케이션 업데이트 일정을 진행하면서, 2019년 여름부터 하이버 MVVM 일정도 진행하였습니다. 이제 2020년 기점으로 MVVM + Koin을 하이버에 반영 완료할 예정입니다. 준비가 길었던 만큼 좋은 결과를 얻을 수 있도록 2020년에도 멈추지 않는 MA팀이 되도록 노력하겠습니다.
<br /><br /></p>

<p><a name="link15"></a></p>
<h3 id="참고">참고</h3>

<p><a href="https://developer.android.com/topic/libraries/architecture/livedata">https://developer.android.com/topic/libraries/architecture/livedata</a><br />
<a href="https://medium.com/harrythegreat/jetpack-android-livedata-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0-ed49a6f17de3">https://medium.com/harrythegreat/jetpack-android-livedata-알아보기-ed49a6f17de3</a><br />
<a href="https://developer.android.com/topic/libraries/architecture/viewmodel">https://developer.android.com/topic/libraries/architecture/viewmodel</a><br />
<a href="https://insert-koin.io/">https://insert-koin.io/</a><br />
<a href="https://start.insert-koin.io/#/">https://start.insert-koin.io/</a></p>
:ET