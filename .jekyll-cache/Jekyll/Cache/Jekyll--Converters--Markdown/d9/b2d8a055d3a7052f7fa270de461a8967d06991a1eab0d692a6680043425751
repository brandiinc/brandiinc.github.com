I".M<h1 id="overview">Overview</h1>

<p>필자는 WEB UI 개발 및 간단한 서버, 내부 개발테스트 등을 할때는 자바스크립트(JavaScript)를 사용합니다.<br />
기본적으로 자바스크립트는 정적 웹페이지에서 다양한 동적 이벤트나 UI 변경 등 정적 리소스에서 제공하지 못한 많은 것들을 가능하게 해줍니다.</p>

<p>예) A 태그에 시스템 알럿창으로 띄우는 코드</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"#"</span> <span class="na">onclick=</span><span class="s">"alert('Hello World.'); return false;"</span><span class="nt">&gt;</span>Click Me.<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="javascript-모듈화가-왜-필요하지-">Javascript 모듈화가 왜 필요하지 ?</h3>

<p>하지만 자바스크립트에서 단순 기능만 작성하지 않기 때문에 모듈화가 필요합니다.<br />
각 페이지에 필요한 기능들을 모은 자바스크립트 파일들이 존재 하는데, 페이지별로 로드하여 사용하기에는 전역변수, 클래스 변수 등 스코프(scope) 처리가 까다로워 코드 작성이 용이하지 않았습니다.<br />
다른 파일로 작성을 하여도 지역 변수가 아닌 변수에 대해서 관리하기가 힘들었습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// common.js</span>
<span class="kd">var</span> <span class="nx">pageName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">페이지이름</span><span class="dl">'</span><span class="p">;</span>
<span class="p">...</span>

<span class="c1">// main.js</span>
<span class="kd">var</span> <span class="nx">pageName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">메인페이지</span><span class="dl">'</span><span class="p">;</span>
<span class="p">...</span>

<span class="c1">// 파일을 달리 작성하여도 `pageName`의 scope를 보장하지 못한다.</span>
</code></pre></div></div>

<p>파일별 scope를 관리하기 위해서 익명함수단위로 모듈화를 적용하였습니다.</p>

<p><br /></p>

<p>예) 익명함수 모듈화</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// product.js</span>
<span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">productId</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="kd">function</span> <span class="nx">loadData</span><span class="p">()</span> <span class="p">{</span>
    <span class="p">...</span>
  <span class="p">}</span>
<span class="p">})();</span>

<span class="c1">// product_info.js</span>
<span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">function</span> <span class="nx">loadData</span><span class="p">()</span> <span class="p">{</span>
    <span class="p">...</span>
    <span class="c1">// product.js 의 productId 값을 참조</span>
  <span class="p">}</span>
<span class="p">})();</span>
</code></pre></div></div>

<p><br /></p>

<p>하지만 함수내 변수를 scope로 관리하기 때문에 <code class="language-plaintext highlighter-rouge">product_info.js</code>에서 <code class="language-plaintext highlighter-rouge">product.js</code> 에 있는<br />
<code class="language-plaintext highlighter-rouge">productId</code> 변수를 참조하기 위해서는 전역변수 혹은 다른 방식으로 데이터값을 전달해야 하는 이슈가 발생합니다.</p>

<p>또한 코드 혹은 개발단계에서 해당 파일에 어떠한 함수와 변수들이 있는지 확인을 위해 여러 소스파일들을 확인하고 이해해야 했습니다.</p>

<p>물론 json 타입으로 생성하여 oop 처럼 사용은 가능합니다만, 일반적인 oop와는 달리 생성자를 통해 클래스 인스턴스를 생성을 하게 되면 아래와 같은 기본 클래스의 정보들을 그대로 사용 할수가 없게됩니다.</p>

<p><br /></p>

<p>아래와 같은 json object를 선언한 상태를 가정합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">BaseObject</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">testFunction</span> <span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p><br /></p>

<p>예) new 키워드를 사용하여 클래스 인스턴스 생성시 오류</p>

<figure class="fitcontent">
  <img src="http://labs.brandi.co.kr///assets/2019/20191224/01.png" alt="oop" />
</figure>
<figcaption></figcaption>

<p><br /></p>

<p>예) constructor 메소드를 사용하여 변수에 할당, 상위 속성을 가져오지 못함</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">aObject</span> <span class="o">=</span> <span class="nx">BaseObject</span><span class="p">.</span><span class="kd">constructor</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">aObject</span><span class="p">);</span>
</code></pre></div></div>

<figure class="fitcontent">
  <img src="http://labs.brandi.co.kr///assets/2019/20191224/02.png" alt="oop" />
</figure>
<figcaption></figcaption>

<p><br /></p>

<p>예) Object.assign 으로 변수에 할당</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">aObject</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">BaseObject</span><span class="p">,</span> <span class="p">{});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">aObject</span><span class="p">);</span>
</code></pre></div></div>

<figure class="fitcontent">
  <img src="http://labs.brandi.co.kr///assets/2019/20191224/03.png" alt="oop" />
</figure>
<figcaption></figcaption>

<p><br /></p>

<p>정상적으로 가져오는 것을 확인할 수가 있습니다.<br />
하지만 이 방법은 객체를 생성하는 것이 아닌, 병합하여 사용하는 것이기 때문에 상위 오브젝트 및 같은 상위 오브젝트를 사용 한다면 아래와 같은 scope 문제가 발생합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">aObject</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">BaseObject</span><span class="p">,</span> <span class="p">{});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">aObject</span><span class="p">);</span> <span class="c1">// {testFunction: f}</span>

<span class="c1">// 변수 값 변경</span>
<span class="nx">aObject</span><span class="p">.</span><span class="nx">testFunction</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">aObject</span><span class="p">);</span> <span class="c1">// {testFunction: "test"}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">BaseObject</span><span class="p">);</span> <span class="c1">// {testFunction: "test"}</span>

<span class="c1">// 다른 변수에 할당</span>
<span class="kd">var</span> <span class="nx">bObject</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">BaseObject</span><span class="p">,</span> <span class="p">{});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bObject</span><span class="p">);</span> <span class="c1">// {testFunction: "test"}</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="javascript-oop-모듈화">Javascript OOP 모듈화</h1>

<p>위와 같은 문제로 모듈화를 OOP로 모듈화 하기로 하였습니다.<br />
자바스크립트의 프로토타입(Prototype)을 사용하여 클래스를 작성합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// base.js</span>

<span class="kd">var</span> <span class="nx">BaseObject</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">_name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">};</span>
<span class="c1">// 간단한 이름조회</span>
<span class="nx">BaseObject</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_name</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// BaseObject 인스턴스 생성</span>
<span class="kd">var</span> <span class="nx">aObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BaseObject</span><span class="p">(</span><span class="dl">"</span><span class="s2">홍길동</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">aObject</span><span class="p">);</span>
<span class="cm">/*
  BaseObject {_name: "홍길동"}
  _name: "홍길동"
  __proto__:
  getName: ƒ ()
  constructor: ƒ (name)
  arguments: null
  caller: null
  length: 1
  name: "BaseObject"
  prototype: {getName: ƒ, constructor: ƒ}
  __proto__: ƒ ()
  [[FunctionLocation]]: VM14190:1
  [[Scopes]]: Scopes[2]
  __proto__: Object
*/</span>


<span class="c1">// 새로운 인스턴스 생성</span>
<span class="kd">var</span> <span class="nx">bObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BaseObject</span><span class="p">(</span><span class="dl">"</span><span class="s2">길동이</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bObject</span><span class="p">);</span>
<span class="cm">/*
  BaseObject {_name: "길동이"}
  _name: "길동이"
  __proto__:
  getName: ƒ ()
  constructor: ƒ (name)
  arguments: null
  caller: null
  length: 1
  name: "BaseObject"
  prototype: {getName: ƒ, constructor: ƒ}
  __proto__: ƒ ()
  [[FunctionLocation]]: VM14190:1
  [[Scopes]]: Scopes[2]
  __proto__: Object
*/</span>

<span class="c1">// 이름 출력</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">aObject</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// 홍길동</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bObject</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// 길동이</span>
</code></pre></div></div>

<p><br /></p>

<p>위 코드에 나오듯이 aObject, bObject의 생성자(constructor)에는 동일한 클래스 정보가 들어가있습니다.<br />
json을 사용하면 클래스가 아니기 때문에 instanceof 를 통한 인스턴스 비교를 할 수가 없지만, 프로토타입(Prototype)를 사용하여 만든 오브젝트는 동일 인스턴스 유무를 확인 할 수가 있습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// json object</span>
<span class="kd">var</span> <span class="nx">jsonBaseObject</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">홍길동</span><span class="dl">"</span><span class="p">;</span> <span class="p">};</span>
<span class="kd">var</span> <span class="nx">jsonObject</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">jsonBaseObject</span><span class="p">,</span> <span class="p">{});</span>
<span class="nx">jsonObject</span> <span class="k">instanceof</span> <span class="nx">jsonBaseObject</span> <span class="c1">// error</span>

<span class="c1">// prototype 클래스</span>
<span class="nx">aObject</span> <span class="k">instanceof</span> <span class="nx">BaseObject</span> <span class="c1">// true</span>
<span class="nx">bObject</span> <span class="k">instanceof</span> <span class="nx">BaseObject</span> <span class="c1">// true</span>
</code></pre></div></div>

<p><br /></p>

<p>이제 위 확인한 내용을 토대로 자바스크립트에서 클래스 단위로 모듈화를 설계할 수 있습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// base.js</span>
<span class="kd">var</span> <span class="nx">BaseObject</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">_name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">_clickCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">};</span>
<span class="c1">// 간단한 이름조회</span>
<span class="nx">BaseObject</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_name</span><span class="p">;</span>
<span class="p">};</span>
<span class="c1">// 클릭 카운트 세기</span>
<span class="nx">BaseObject</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">click</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">_clickCount</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">};</span>
<span class="c1">// 클릭 카운트 조회</span>
<span class="nx">BaseObject</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getClickCount</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_clickCount</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// index.js</span>
<span class="kd">var</span> <span class="nx">aObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BaseObject</span><span class="p">(</span><span class="dl">"</span><span class="s2">메인페이지</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">bObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BaseObject</span><span class="p">(</span><span class="dl">"</span><span class="s2">상세페이지</span><span class="dl">"</span><span class="p">);</span>

<span class="c1">// 메인페이지 클릭 3번</span>
<span class="nx">aObject</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
<span class="nx">aObject</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
<span class="nx">aObject</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>

<span class="c1">// 상세페이지 클릭 5번</span>
<span class="nx">bObject</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
<span class="nx">bObject</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
<span class="nx">bObject</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
<span class="nx">bObject</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
<span class="nx">bObject</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>

<span class="c1">// 클릭 횟수 확인</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">aObject</span><span class="p">.</span><span class="nx">getClickCount</span><span class="p">());</span>  <span class="c1">// 3</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bObject</span><span class="p">.</span><span class="nx">getClickCount</span><span class="p">());</span>  <span class="c1">// 5</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="conclusion">Conclusion</h1>

<p>최근 개발흐름을 보니 react, vuejs 등 많은 자바스크립트 프레임워크나 타입스크립트(TypeScript) 가 있어 프로토타입(Prototype)을 이용한 클래스 설계는 잘 하지 않는 것 같습니다.<br />
하지만 순수 자바스크립트로만 구현을 해야 할 상황이라면? 또는 자바스크립트에서 가벼운 클래스 설계가 필요할때는 프로토타입(Prototype)을 이용한 클래스 단위별 모듈화를 설계 하는게 좋은 작업이라고 생각됩니다.</p>

<p><br /></p>

<h3 id="참고">참고</h3>

<p><a href="https://ko.wikipedia.org/wiki/%EA%B0%9D%EC%B2%B4_%EC%A7%80%ED%96%A5_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D">https://ko.wikipedia.org/wiki/객체_지향_프로그래밍</a><br />
<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript">https://developer.mozilla.org/ko/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript</a></p>
:ET